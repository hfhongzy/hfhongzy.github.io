{"posts":[{"title":"Artificial Intelligence (H) Sample Paper","text":"Sample Paper: Artificial Intelligence (H), Bo Yuan True or False. On a graph where each edge is at least \\(\\epsilon\\): Greedy Search is optimal. BFS is optimal. UCS is optimal. If we use A* with the heuristic \\(h_2(n)\\), where \\(h_2(n) = 2\\cdot h(n)\\) and \\(h(n)\\) is admissible: This A* is optimal. Answer(A*) \\(\\le 2 \\times\\) optimal answer. Alpha-Beta Pruning. You are given a tree. Mark the pruned branches. The decision of the root. The alpha and beta values of the root. Constraints Satisfaction Problem (CSP). You are given a map like that in lecture slides. Cross out some values by Forward Checking. Cross out some values by AC-3 (arc-consistency). Which variables can be chosen, using MRV (Minimize Remaining Value) strategy? Logic. Formalize five statements statements into propositional logic. Convert to CNF. Describe the steps for DPLL on this CNF. Confusion Matrix. Given \\(n=10,d=2\\) \\(x_i\\)s and \\(y_i\\in \\{+1,-1\\}\\). \\(w=[1,2]\\) is fixed, but \\(b\\) is unknown. List all possible pairs of (Precision, Specificity). (Formula is given.) Decision Tree. Give \\(n=10\\) samples, with attributes: is green or not, tall or short, smelly or not, two or three legs. Classify into Alien or Human. Draw the decision tree of the sample above. Describe the rule to identify Alien (e.g. If (Green = Y and ...) .. Else If (..)) Find a CNF to identify the Alien, which is correct on the dataset. Each clause has exactly two literals. Given \\(n\\) examples \\((x_i, y_i)\\), where \\(x_i\\) is d-dimension, \\(y_i \\in \\{-1,+1\\}\\)Gradient Descent with the loss function \\(L(z) = e^{-z}\\), where \\(z = f(x_i)y_i\\). Explain why can \\(L\\) be used for the loss function. Give \\(\\Delta w\\) for a single sample point in stochastic gradient descent. Give \\(\\Delta w\\) for gradient descent. Explain the relationship between the complexity and the bias and variance of a model. For a low-bias and high-variance algorithm, which should be used, boosting or bagging, and why? Briefly describe the similarities and differences between bagging and boosting. Naive Bayes is not a good choice for bagging. Explain the reasons. Random forest, as a variant of bagging, is usually faster than bagging. Explain the reasons.","link":"/2024/09/22/AI-Exam/"},{"title":"About","text":"‚≠êÔ∏èHi! I am Hong Zhaoyang, a third-year undergraduate from the Southern University of Science and Technology (SUSTech) in Shenzhen, China. I am currently conducting research on vector databases (VDB) for large language models (LLMs) in the SUSTech DBGroup under the guidance of Prof. Bo Tang. I plan to apply for a CS PhD program for admission in Fall 2026. I have a keen interest in system design and mechanisms. I also enjoy socializing and collaborating with others. Awards 2022-2023: 47th ICPC (International College Programming Contest) World Finalist (Top 1%) (Qualification Regional) 2023-2024: 9th CCPC (Chinese College Programming Contest) Regional 2-nd runner-up (Scoreboard) 2024: SIGMOD Programming Contest World Finalist (Dashboard) See more repetitive awards here Publications Yangshen Deng, Shiwen Chen, Zhaoyang Hong, Bo Tang. How Does Software Prefetching Work on GPU Query Processing? 20th International Workshop on Data Management on New Hardware (DaMoN), affiliated with SIGMOD , Santiago, Chile, June 2024. Experiences Student Assistant of CS209 Introduction to Java Programming, Fall 2023 Student Assistant of CS203 Data Structures and Algorithm Analysis, Fall 2024 (English-speaking, Ongoing) Student Coach of SUSTech-CPC Competition Team, 2022-2023 Problem Setter and Organizer of 2023 SUSTech Programming Competition (Involving 200+ participants from 10+ schools) Instructor of the Voluntary Courses in Olympic in Informatics (OI) for The High school Affiliated to Southern University of Science and Technology (HSAS), 2023 Summer Instructor of X-Camp Summer Camp, 2024 Summer (Hangzhou, China)","link":"/2024/07/11/About/"}],"tags":[],"categories":[],"pages":[{"title":"About","text":"‚≠êÔ∏èHi! I am Hong Zhaoyang, a third-year undergraduate from the Southern University of Science and Technology (SUSTech) in Shenzhen, China. I am currently conducting research on vector databases (VDB) for large language models (LLMs) in the SUSTech DBGroup under the guidance of Prof. Bo Tang. I plan to apply for a CS PhD program for admission in Fall 2026. I have a keen interest in system design and mechanisms. I also enjoy socializing and collaborating with others. Awards 2022-2023: 47th ICPC (International College Programming Contest) World Finalist (Top 1%) (Qualification Regional) 2023-2024: 9th CCPC (Chinese College Programming Contest) Regional 2-nd runner-up (Scoreboard) 2024: SIGMOD Programming Contest World Finalist (Dashboard) See more repetitive awards here Publications Yangshen Deng, Shiwen Chen, Zhaoyang Hong, Bo Tang. How Does Software Prefetching Work on GPU Query Processing? 20th International Workshop on Data Management on New Hardware (DaMoN), affiliated with SIGMOD , Santiago, Chile, June 2024. Experiences Student Assistant of CS209 Introduction to Java Programming, Fall 2023 Student Assistant of CS203 Data Structures and Algorithm Analysis, Fall 2024 (English-speaking, Ongoing) Student Coach of SUSTech-CPC Competition Team, 2022-2023 Problem Setter and Organizer of 2023 SUSTech Programming Competition (Involving 200+ participants from 10+ schools) Instructor of the Voluntary Courses in Olympic in Informatics (OI) for The High school Affiliated to Southern University of Science and Technology (HSAS), 2023 Summer Instructor of X-Camp Summer Camp, 2024 Summer (Hangzhou, China)","link":"/about/index.html"},{"title":"","text":"SUSTech-Vichy (with Li Haoyu, Chen Luyao) 2022 ICPC Asia Xi'an Regional Contest Gold (qualified for World Final) 2022 ICPC Asia Nanjing Regional Contest Gold 2022 CCPC Guilin Regional Contest Gold SUSTech-Helsinki (with Feng Zhaohang, He Yujun) 2023 ICPC Asia Xi'an Regional Contest Gold 2023 ICPC Asia Hangzhou Regional Contest Gold 2023 CCPC Harbin Regional Contest Gold 2023 CCPC Guilin Regional Contest Gold (2nd runner-up) 2023 ICPC Asia-East Continent Final Contest Silver Personal 2022 SUSTech Programming Contest First Prize 2022 Shenzhen Technology University Programming Contest First Prize 2022 Shenzhen University Programming Contest Second Place","link":"/competitions/index.html"},{"title":"Gallery","text":"I engaged in the proposition and led the organization of the 2023 SUSTech Programming Contest (involving over 200 participants). I provided Olympic in Informatics (OI) courses for the High school Affiliated to Southern University of Science and Technology. I performed as a classical guitarist in our band at the campus Starry Sky Concert, playing Hotel California. Do you like this classic English song? SUSTech-Vichy team attended ICPC World Finals 2023 in Luxor, Egypt. SUSTech-Helsinki team won the first regional trophy üèÜ for SUSTech. A photo with Mike Mirzayanov, the founder of Codeforces. VLDB2024 (Guangzhou)","link":"/gallery/index.html"},{"title":"2024 Fall - Data Structures and Algorithms Analysis Tutorials","text":"Lab3D Converted Vinux input In this problem, you need to implement a one-line editor. The idea of using the bidirectional linked list is straightforward. 1234class Node { public char ch; public Node left, right;}; Hint: EOF is represented by -1. You can preserve this convention. Also, maintain some additional pointers, pointing to the head node, tail node (EOF), and current node. 1Node hd, tl, current; r: next single input would replace the current character; You could immediately read the next character and replace the character of the current node with the new one. Please note that the EOL will revive immediately at the end of the line whenever it vanishes! So if the current node is EOF, you should first create a new EOF, adjacent to the right of the current node, before (or, after) replacing the current character. Don't forget to update bk. I: move the character pointer to the head of the line; 1current = hd; H: left shift the current character pointer unless it is at the leftmost place; 123if (current != hd) { current = current.left;} L: right shift the current character pointer unless it is at the rightmost place; Similar to H. x: delete the current character; If the current character is not EOF, simply remove it from the linked list. 1234Node L = current.left;Node R = current.right;L.right = R;R.left = L; If the current character is EOF, just do nothing. Lab3E From-now-on minimum difference Prerequisite: Monotonic Stack. Task: Given a sequence \\(a_1,...,a_n\\). Find \\(r_i = \\min_{j&gt;i,a_j&gt;a_i} j\\) for every \\(i\\) in \\(\\mathcal O(n)\\). Lab3F Peggy hates decreasing There will be multiple rounds of deletion. If we can precisely identify the elements to delete in each round, the total complexity will be \\(\\mathcal{O}(n)\\), as each element is examined (or deleted) at most once. To facilitate fast deletion, we construct a linked list. Initially, the elements \\(a_1, a_2, \\dots, a_n\\) are linked together. In the first round, a for-loop is used to find the elements that need to be erased. 12345for (int i = 1; i &lt;= n; i ++) { if (a[i] is decreasing) { Q1.push(node[i]); }} Starting from the second round, the deletion queue can be derived from the previous round's queue, based on the following observation: If an element is not \"decreasing\" initially and neither of its neighbors has been deleted now, it remains \"non-decreasing\". Now, suppose we are deleting elements \\(x\\) (in the linked list) one by one from the queue \\(Q_x\\). After removing \\(x\\), we add its neighbors x.left and x.right to a \"candidate list\" for \\(Q_{x+1}\\). Once the current round of deletions is complete, we check each element to determine if it should be added in \\(Q_{x+1}\\). This process continues until \\(Q_x\\) is empty.","link":"/tutorials/index.html"}]}